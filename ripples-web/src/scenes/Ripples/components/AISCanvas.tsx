import IAisShip, { AisShip } from '../../../model/IAisShip'
import IPositionAtTime from '../../../model/IPositionAtTime'
import PositionService from '../../../services/PositionUtils'

interface PropsType {
  ship: IAisShip
  perpLinesSize: number
}

export default class AISCanvas {
  public props: PropsType
  private positionService: PositionService = new PositionService()
  constructor(props: PropsType) {
    this.props = props
    this.drawInCanvas = this.drawInCanvas.bind(this)
    this.getCirclesCenter = this.getCirclesCenter.bind(this)
  }

  public drawInCanvas(info: any, displayMeasure: boolean) {
    const ship = this.props.ship
    const ctx = info.canvas.getContext('2d')
    if (ship.sog > 0.2) {
      this.drawAisLines(info, ctx, ship, displayMeasure)
    }
  }

  private drawAisLines(info: any, ctx: any, ship: IAisShip, displayMeasure: boolean) {
    const speed = ship.sog * this.positionService.getKnotsToMs()
    const posIn1H = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 3600)
    const pointA = info.map.latLngToContainerPoint([ship.latitude, ship.longitude])
    const pointB = info.map.latLngToContainerPoint([posIn1H.latitude, posIn1H.longitude])
    let nPoints = 0

    if (this.isOverLand(posIn1H.longitude.toFixed(13), posIn1H.latitude.toFixed(13))) {
      const posIn50M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        3000
      )
      const posIn45M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        2700
      )
      const posIn40M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        2400
      )
      const posIn35M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        2100
      )
      const posIn30M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        1800
      )
      const posIn25M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        1500
      )
      const posIn20M = this.positionService.calculateNextPosition(
        AisShip.getPositionAtTime(ship),
        ship.cog,
        speed,
        1200
      )
      const posIn15M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 900)
      const posIn10M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 600)
      const posIn5M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 300)
      const posIn4M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 240)
      const posIn3M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 180)
      const posIn2M = this.positionService.calculateNextPosition(AisShip.getPositionAtTime(ship), ship.cog, speed, 120)

      if (this.isOverLand(posIn2M.longitude.toFixed(13), posIn2M.latitude.toFixed(13))) {
        const newPointB = info.map.latLngToContainerPoint([posIn2M.latitude, posIn2M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn3M.longitude.toFixed(13), posIn3M.latitude.toFixed(13))) {
        const newPointB = info.map.latLngToContainerPoint([posIn3M.latitude, posIn3M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn4M.longitude.toFixed(13), posIn4M.latitude.toFixed(13))) {
        const newPointB = info.map.latLngToContainerPoint([posIn4M.latitude, posIn4M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn5M.longitude.toFixed(13), posIn5M.latitude.toFixed(13))) {
        const newPointB = info.map.latLngToContainerPoint([posIn5M.latitude, posIn5M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn10M.longitude.toFixed(13), posIn10M.latitude.toFixed(13))) {
        nPoints = 1
        const newPointB = info.map.latLngToContainerPoint([posIn10M.latitude, posIn10M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn15M.longitude.toFixed(13), posIn15M.latitude.toFixed(13))) {
        nPoints = 1
        const newPointB = info.map.latLngToContainerPoint([posIn15M.latitude, posIn15M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn20M.longitude.toFixed(13), posIn20M.latitude.toFixed(13))) {
        nPoints = 2
        const newPointB = info.map.latLngToContainerPoint([posIn20M.latitude, posIn20M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn25M.longitude.toFixed(13), posIn25M.latitude.toFixed(13))) {
        nPoints = 2
        const newPointB = info.map.latLngToContainerPoint([posIn25M.latitude, posIn25M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn30M.longitude.toFixed(13), posIn30M.latitude.toFixed(13))) {
        nPoints = 3
        const newPointB = info.map.latLngToContainerPoint([posIn30M.latitude, posIn30M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn35M.longitude.toFixed(13), posIn35M.latitude.toFixed(13))) {
        nPoints = 3
        const newPointB = info.map.latLngToContainerPoint([posIn35M.latitude, posIn35M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn40M.longitude.toFixed(13), posIn40M.latitude.toFixed(13))) {
        nPoints = 4
        const newPointB = info.map.latLngToContainerPoint([posIn40M.latitude, posIn40M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn45M.longitude.toFixed(13), posIn45M.latitude.toFixed(13))) {
        nPoints = 4
        const newPointB = info.map.latLngToContainerPoint([posIn45M.latitude, posIn45M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else if (this.isOverLand(posIn50M.longitude.toFixed(13), posIn50M.latitude.toFixed(13))) {
        nPoints = 5
        const newPointB = info.map.latLngToContainerPoint([posIn50M.latitude, posIn50M.longitude])
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(newPointB.x, newPointB.y)
        ctx.stroke()
      } else {
        nPoints = 5
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.strokeStyle = 'rgb(0,0,0,0.5)'
        ctx.moveTo(pointA.x, pointA.y)
        ctx.lineTo(pointB.x, pointB.y)
        ctx.stroke()
      }
    } else {
      nPoints = 6
      ctx.beginPath()
      ctx.lineWidth = 1
      ctx.strokeStyle = 'rgb(0,0,0,0.5)'
      ctx.moveTo(pointA.x, pointA.y)
      ctx.lineTo(pointB.x, pointB.y)
      ctx.stroke()
    }

    this.getCirclesCenter(ship, nPoints).forEach((line: IPositionAtTime, index: number) => {
      const radius = 2
      const center = info.map.latLngToContainerPoint([line.latitude, line.longitude])
      ctx.beginPath()
      ctx.arc(center.x, center.y, radius, 0, 2 * Math.PI, false)
      ctx.fillStyle = 'rgb(127,0,0)'

      if (displayMeasure) {
        ctx.fillText(10 * (index + 1), center.x, center.y)
      }

      ctx.fill()
    })
  }

  private getCirclesCenter(ship: IAisShip, nPoints: number): IPositionAtTime[] {
    const tenMinutes = 600
    const centers: IPositionAtTime[] = []
    const aisCurrentPos = AisShip.getPositionAtTime(ship)
    const shipSpeed = ship.sog * this.positionService.getKnotsToMs()
    for (let i = 1; i <= nPoints; i++) {
      const time = i * tenMinutes
      const pointC = this.positionService.calculateNextPosition(aisCurrentPos, ship.cog, shipSpeed, time)
      centers.push(pointC)
    }
    return centers
  }

  private isOverLand(x: any, y: any): boolean {
    const polygon = [
      [-8.862190246582031, 41.87007214667565],
      [-8.867683410644531, 41.84526843121213],
      [-8.875579833984375, 41.83503729355457],
      [-8.873691558837889, 41.82723495194037],
      [-8.871803283691406, 41.817640605526826],
      [-8.864765167236328, 41.8118833076401],
      [-8.872489929199219, 41.79780773415637],
      [-8.873348236083984, 41.77041548653221],
      [-8.879356384277344, 41.74992765612834],
      [-8.873863220214844, 41.73519798789358],
      [-8.856697082519531, 41.699704829626036],
      [-8.851890563964844, 41.69867946523769],
      [-8.847427368164062, 41.68252781967316],
      [-8.842277526855469, 41.68380984445887],
      [-8.84472370147705, 41.690892570971236],
      [-8.841590881347656, 41.691309177659996],
      [-8.83798599243164, 41.688681305689016],
      [-8.81601333618164, 41.697013213237994],
      [-8.77756118774414, 41.69842312158612],
      [-8.774127960205078, 41.69214238294329],
      [-8.784255981445312, 41.6872711837914],
      [-8.813095092773438, 41.687655765555995],
      [-8.816184997558592, 41.69060414937538],
      [-8.821678161621094, 41.6872711837914],
      [-8.821163177490234, 41.68419444691368],
      [-8.826141357421875, 41.681886797701594],
      [-8.832321166992188, 41.68291242979089],
      [-8.83472442626953, 41.6799636934724],
      [-8.82596969604492, 41.67329648719081],
      [-8.826484680175781, 41.649955826379],
      [-8.819961547851562, 41.63558813788945],
      [-8.821163177490234, 41.62930126680884],
      [-8.813438415527344, 41.61993397475072],
      [-8.811206817626953, 41.612362155265984],
      [-8.80331039428711, 41.581038750695754],
      [-8.793354034423828, 41.54250553376699],
      [-8.790950775146484, 41.542120085565344],
      [-8.776016235351562, 41.5201457403486],
      [-8.76760482788086, 41.515133002270105],
      [-8.762969970703125, 41.51346200330125],
      [-8.757648468017578, 41.51346200330125],
      [-8.751983642578125, 41.51397616142466],
      [-8.743572235107422, 41.51796074840626],
      [-8.742713928222656, 41.51628982244004],
      [-8.751468658447266, 41.51153387396518],
      [-8.762798309326172, 41.50999132914586],
      [-8.771553039550781, 41.51346200330125],
      [-8.776702880859375, 41.51539007520577],
      [-8.784942626953125, 41.52785688696333],
      [-8.786144256591797, 41.52759986354819],
      [-8.78580093383789, 41.52387290928639],
      [-8.78683090209961, 41.523101788498494],
      [-8.789405822753906, 41.52554363946853],
      [-8.790264129638672, 41.530298558481455],
      [-8.791637420654297, 41.53017005175159],
      [-8.79129409790039, 41.5254151232938],
      [-8.787002563476562, 41.51539007520577],
      [-8.789920806884766, 41.50253517770414],
      [-8.783912658691406, 41.48903478831431],
      [-8.776359558105469, 41.48054738902554],
      [-8.775672912597656, 41.46356925533331],
      [-8.787345886230469, 41.413895564677304],
      [-8.778076171875, 41.401921867920024],
      [-8.78030776977539, 41.39599857860365],
      [-8.776187896728514, 41.39303673150584],
      [-8.77429962158203, 41.38608229923676],
      [-8.769493103027344, 41.380801585315346],
      [-8.768119812011719, 41.377452617705394],
      [-8.76485824584961, 41.377066187268866],
      [-8.762454986572266, 41.375262814874915],
      [-8.76211166381836, 41.37242884295152],
      [-8.76382827758789, 41.37101181069003],
      [-8.762798309326172, 41.3699812223855],
      [-8.763656616210938, 41.36895061775508],
      [-8.761253356933594, 41.36856413680967],
      [-8.760223388671875, 41.36186476898025],
      [-8.755760192871092, 41.358772520422285],
      [-8.754215240478516, 41.3532318743157],
      [-8.754215240478516, 41.3500103516271],
      [-8.754386901855469, 41.343566827997414],
      [-8.746318817138672, 41.34266468380401],
      [-8.744773864746094, 41.34936602795912],
      [-8.742027282714844, 41.35168556332073],
      [-8.736190795898438, 41.3518144239732],
      [-8.733272552490234, 41.3518144239732],
      [-8.728981018066406, 41.357226341046065],
      [-8.727607727050781, 41.35516471140717],
      [-8.727779388427734, 41.35052580597025],
      [-8.733100891113281, 41.3500103516271],
      [-8.73636245727539, 41.3502680793088],
      [-8.739967346191406, 41.34988148740366],
      [-8.74237060546875, 41.346788669520244],
      [-8.742713928222656, 41.343566827997414],
      [-8.740482330322266, 41.34176252711261],
      [-8.74237060546875, 41.33957152311568],
      [-8.74408721923828, 41.34034482706094],
      [-8.745288848876953, 41.33970040774419],
      [-8.739967346191406, 41.33480261255644],
      [-8.740653991699219, 41.310565997147854],
      [-8.727436065673828, 41.264517402953786],
      [-8.724174499511719, 41.260130127657625],
      [-8.726921081542969, 41.24322345853027],
      [-8.720569610595703, 41.227345275234555],
      [-8.71713638305664, 41.226441522792406],
      [-8.715333938598633, 41.218113501754814],
      [-8.716621398925781, 41.20584549296149],
      [-8.706064224243162, 41.19053954174602],
      [-8.70718002319336, 41.18634108159364],
      [-8.704776763916016, 41.18769753662004],
      [-8.702974319458008, 41.18608270602165],
      [-8.703317642211914, 41.18537216794189],
      [-8.702716827392578, 41.18479081286916],
      [-8.699455261230469, 41.18743916640052],
      [-8.68417739868164, 41.1960294295703],
      [-8.682546615600586, 41.19790234478943],
      [-8.681688308715819, 41.197062768732174],
      [-8.682546615600586, 41.19441480447213],
      [-8.687009811401367, 41.19202508623781],
      [-8.685379028320312, 41.18982905202979],
      [-8.691902160644531, 41.188860189991225],
      [-8.697996139526367, 41.18511378854675],
      [-8.697137832641602, 41.18252993852274],
      [-8.699026107788086, 41.180010586590996],
      [-8.698253631591795, 41.17910618020693],
      [-8.697052001953125, 41.17910618020693],
      [-8.689155578613281, 41.17264577142037],
      [-8.688297271728516, 41.16954454888413],
      [-8.690099716186523, 41.167024697481565],
      [-8.685722351074219, 41.162824729791815],
      [-8.685979843139648, 41.15978766238589],
      [-8.675251007080078, 41.147896512602706],
      [-8.658084869384766, 41.14776724912472],
      [-8.641433715820312, 41.14905987243725],
      [-8.632850646972656, 41.14776724912472],
      [-8.612937927246094, 41.14117447384262],
      [-8.600234985351562, 41.14285504813144],
      [-8.59405517578125, 41.14001097410736],
      [-8.587703704833984, 41.1427257747151],
      [-8.581352233886717, 41.14375995491069],
      [-8.581352233886717, 41.138976734792514],
      [-8.584785461425781, 41.13910601559875],
      [-8.593883514404297, 41.136391065155486],
      [-8.596630096435547, 41.137037492120484],
      [-8.598861694335936, 41.13962313627547],
      [-8.60504150390625, 41.13962313627547],
      [-8.611736297607422, 41.13833032693901],
      [-8.616714477539062, 41.137166776749034],
      [-8.62100601196289, 41.137166776749034],
      [-8.62478256225586, 41.14078664289095],
      [-8.631134033203125, 41.141820853665614],
      [-8.639202117919922, 41.14595753367537],
      [-8.647270202636719, 41.14388922628842],
      [-8.66048812866211, 41.13652035105814],
      [-8.66323471069336, 41.13677892209895],
      [-8.664779663085938, 41.14143302653628],
      [-8.667354583740234, 41.14156230250088],
      [-8.667011260986328, 41.13794247916908],
      [-8.67044448852539, 41.133934584590065],
      [-8.664264678955078, 41.113762108129244],
      [-8.655681610107422, 41.088667173210624],
      [-8.657398223876953, 41.06925730013503],
      [-8.655509948730469, 41.049323867571616],
      [-8.645038604736328, 41.03288071261766],
      [-8.64400863647461, 41.021484621040024],
      [-8.647613525390623, 41.009568416569934],
      [-8.64572525024414, 41.007754892144106],
      [-8.647613525390623, 40.99920474755419],
      [-8.64572525024414, 40.995058823610506],
      [-8.647441864013672, 40.98948732769741],
      [-8.648643493652344, 40.98158276997307],
      [-8.649845123291016, 40.973936476692614],
      [-8.652591705322266, 40.96551156815455],
      [-8.65345001220703, 40.9631297162844],
      [-8.65100383758545, 40.96706701685124],
      [-8.638472557067871, 40.96790953625355],
      [-8.639287948608398, 40.96288666534169],
      [-8.643579483032227, 40.96570600124669],
      [-8.649373054504395, 40.96531713448955],
      [-8.654179573059082, 40.962270932280745],
      [-8.656539916992188, 40.957733774724154],
      [-8.655166625976562, 40.95744208964048],
      [-8.657441139221191, 40.94998747793444],
      [-8.656926155090332, 40.94966334528767],
      [-8.65774154663086, 40.94421767891174],
      [-8.666839599609375, 40.8870435151357],
      [-8.688812255859375, 40.83043687764923],
      [-8.733444213867188, 40.70406634324247],
      [-8.752670288085938, 40.64938745451835],
      [-8.72314453125, 40.67959657544238],
      [-8.719711303710936, 40.70094304347228],
      [-8.656539916992188, 40.70510741061974],
      [-8.63800048828125, 40.654075973582415],
      [-8.692245483398438, 40.62541876792772],
      [-8.707351684570312, 40.64990841734959],
      [-8.725204467773438, 40.64000942809261],
      [-8.74786376953125, 40.63688312646408],
      [-8.792495727539062, 40.48978184687258],
      [-8.814468383789062, 40.414018849687714],
      [-8.843307495117188, 40.33345980653098],
      [-8.906478881835938, 40.18569303805316],
      [-8.905105590820312, 40.17887331434696],
      [-8.878669738769531, 40.16359202197868],
      [-8.872318267822266, 40.14673270055351],
      [-8.857555389404297, 40.14922578219204],
      [-8.855323791503906, 40.1475856072009],
      [-8.831977844238281, 40.146863917657846],
      [-8.802452087402344, 40.138859210445894],
      [-8.800220489501953, 40.13754687338236],
      [-8.799877166748047, 40.13321598124515],
      [-8.799190521240234, 40.129016064673706],
      [-8.804683685302734, 40.12888481309897],
      [-8.825798034667969, 40.13754687338236],
      [-8.837471008300781, 40.137415638281986],
      [-8.850173950195312, 40.13833427866201],
      [-8.863048553466797, 40.13045981526841],
      [-8.874549865722656, 40.09448816916972],
      [-8.914031982421875, 40.002371935876475],
      [-9.018402099609375, 39.784795661568374],
      [-9.085006713867188, 39.6088622615816],
      [-9.07196044921875, 39.601984897284666],
      [-9.073333740234375, 39.588095829645454],
      [-9.06972885131836, 39.58558227224178],
      [-9.072475433349608, 39.581745614097564],
      [-9.079170227050781, 39.584127013122675],
      [-9.141998291015625, 39.51847630364586],
      [-9.140968322753906, 39.51251701659638],
      [-9.136161804199219, 39.51304675170201],
      [-9.135475158691406, 39.50576253994294],
      [-9.139595031738281, 39.50231882856372],
      [-9.147491455078123, 39.50324599841432],
      [-9.151439666748045, 39.50801410511705],
      [-9.173240661621094, 39.4956958270616],
      [-9.19607162475586, 39.47423296775743],
      [-9.232120513916016, 39.43141996823385],
      [-9.289112091064453, 39.391897322129694],
      [-9.315032958984375, 39.378098910713184],
      [-9.337177276611328, 39.3714640880158],
      [-9.342327117919922, 39.36496135004594],
      [-9.357089996337889, 39.359519818280745],
      [-9.371166229248047, 39.362572437084125],
      [-9.386787414550781, 39.36973893083485],
      [-9.403438568115234, 39.3660230629119],
      [-9.406700134277344, 39.35991799351635],
      [-9.392280578613281, 39.35381239049528],
      [-9.380435943603514, 39.354210598262206],
      [-9.376487731933594, 39.356997989081975],
      [-9.364471435546875, 39.35567067398999],
      [-9.367218017578125, 39.35155583694641],
      [-9.360008239746092, 39.341201304033454],
      [-9.358634948730469, 39.32447151024322],
      [-9.344902038574219, 39.31198794598777],
      [-9.333915710449219, 39.27186610203728],
      [-9.341812133789062, 39.24156021037737],
      [-9.3438720703125, 39.21310328979648],
      [-9.355545043945312, 39.181973639117345],
      [-9.370307922363281, 39.15136267949029],
      [-9.391937255859375, 39.11940660636222],
      [-9.420433044433592, 39.074377212242275],
      [-9.414596557617186, 39.062382289289836],
      [-9.423179626464844, 39.02051737539191],
      [-9.42352294921875, 38.9991753950833],
      [-9.41802978515625, 38.962078391086926],
      [-9.414939880371094, 38.950064405159814],
      [-9.421463012695312, 38.92496195301519],
      [-9.43794250488281, 38.886757140695906],
      [-9.472274780273438, 38.82312593339483],
      [-9.499053955078125, 38.77871080859691],
      [-9.474678039550781, 38.75435101206233],
      [-9.471244812011719, 38.75060261288245],
      [-9.471931457519531, 38.73774946428237],
      [-9.484634399414062, 38.70935723235625],
      [-9.463348388671875, 38.69676461413586],
      [-9.449272155761719, 38.69596075470557],
      [-9.44000244140625, 38.69542484339968],
      [-9.424552917480469, 38.69086943518648],
      [-9.420433044433592, 38.694620968912254],
      [-9.418716430664062, 38.700247900602726],
      [-9.404983520507812, 38.70453478951588],
      [-9.345588684082031, 38.68202575584783],
      [-9.323616027832031, 38.67478920520597],
      [-9.289283752441406, 38.69676461413586],
      [-9.274864196777344, 38.700515838688716],
      [-9.252548217773438, 38.701587580994214],
      [-9.239845275878906, 38.699444080321705],
      [-9.225425720214844, 38.69596075470557],
      [-9.205856323242188, 38.69515688624102],
      [-9.186630249023438, 38.69864025100615],
      [-9.167404174804688, 38.70480271154007],
      [-9.142684936523436, 38.70641022260375],
      [-9.117965698242188, 38.717126039425644],
      [-9.100799560546875, 38.74123075381228],
      [-9.092559814453125, 38.799584013897054],
      [-9.0802001953125, 38.83756825896614],
      [-9.063034057617188, 38.86216695339701],
      [-9.026641845703123, 38.886757140695906],
      [-8.979949951171873, 38.88408470638818],
      [-8.927078247070312, 38.77068102544212],
      [-9.035568237304688, 38.71391146304093],
      [-9.040374755859375, 38.701051711849146],
      [-8.96209716796875, 38.70265930723801],
      [-8.95111083984375, 38.694620968912254],
      [-9.003295898437498, 38.67746949445934],
      [-8.994369506835938, 38.654951945545015],
      [-9.054794311523438, 38.66299474019031],
      [-9.079513549804688, 38.66138625351512],
      [-9.056854248046873, 38.638863646894464],
      [-9.046554565429688, 38.59809045854761],
      [-9.080886840820312, 38.6329636990003],
      [-9.098739624023438, 38.63457282385875],
      [-9.10491943359375, 38.61901643727865],
      [-9.149551391601562, 38.64100896209024],
      [-9.13581848144531, 38.65334327823747],
      [-9.161224365234375, 38.67746949445934],
      [-9.255294799804688, 38.66299474019031],
      [-9.214096069335938, 38.61311485607905],
      [-9.1790771484375, 38.53044174921205],
      [-9.1900634765625, 38.46111640240984],
      [-9.218215942382812, 38.41647645943579],
      [-9.194869995117188, 38.41378642476067],
      [-9.151611328125, 38.436379603],
      [-9.102859497070312, 38.4428334985915],
      [-9.065093994140625, 38.43906879628627],
      [-8.997116088867188, 38.464879954577896],
      [-8.968963623046875, 38.489606982959856],
      [-8.938064575195312, 38.48745714328253],
      [-8.909225463867188, 38.51647456686519],
      [-8.887252807617188, 38.522384090200845],
      [-8.8494873046875, 38.50841534409804],
      [-8.812408447265625, 38.489606982959856],
      [-8.793869018554688, 38.49014443285755],
      [-8.776016235351562, 38.50465406475561],
      [-8.784942626953125, 38.53849850597664],
      [-8.732757568359375, 38.54762840618704],
      [-8.718338012695312, 38.44498466889473],
      [-8.649673461914062, 38.41109628993052],
      [-8.576202392578125, 38.41486245064945],
      [-8.576202392578125, 38.4014109752926],
      [-8.757476806640625, 38.40840605494758],
      [-8.778762817382812, 38.40679186588536],
      [-8.7890625, 38.40410147066251],
      [-8.788375854492188, 38.38095993790538],
      [-8.798675537109373, 38.375577124692164],
      [-8.77326965332031, 38.25974980039479],
      [-8.784942626953125, 38.148057572086444],
      [-8.821334838867188, 38.050794662666895],
      [-8.881072998046875, 37.95502661288625],
      [-8.812408447265625, 37.93444993515032],
      [-8.791809082031248, 37.87051721701939],
      [-8.796615600585938, 37.80381638220768],
      [-8.80828857421875, 37.74520008134973],
      [-8.788375854492188, 37.72021976910832],
      [-8.815155029296875, 37.59845611922412],
      [-8.78631591796875, 37.53804390907164],
      [-8.797988891601562, 37.44433544620035],
      [-8.824081420898438, 37.37943348292772],
      [-8.873519897460938, 37.318844002395444],
      [-8.870086669921875, 37.29699797218557],
      [-8.8604736328125, 37.27186719156333],
      [-8.900985717773436, 37.19806537087233],
      [-8.913345336914062, 37.19587754834048],
      [-8.90716552734375, 37.18821967018367],
      [-8.906478881835938, 37.17344871200958],
      [-8.90167236328125, 37.16852441744235],
      [-8.990249633789062, 37.0266767305112],
      [-8.966903686523438, 37.02832127378562],
      [-8.946304321289062, 37.00584276741093],
      [-8.930511474609375, 37.00693943418586],
      [-8.9263916015625, 37.021194662451606],
      [-8.895492553710938, 37.04421668967971],
      [-8.820648193359375, 37.066683840893084],
      [-8.759536743164062, 37.07490186820611],
      [-8.733444213867188, 37.08640561029594],
      [-8.669586181640625, 37.08257122355467],
      [-8.669586181640625, 37.10393176520052],
      [-8.649673461914062, 37.12035885341966],
      [-8.601608276367188, 37.124191327897925],
      [-8.570022583007812, 37.11707372086296],
      [-8.532943725585938, 37.11762125285503],
      [-8.535261154174805, 37.13103454969984],
      [-8.534660339355469, 37.13828768922088],
      [-8.529338836669922, 37.138013998466505],
      [-8.524703979492188, 37.135208611147924],
      [-8.524103164672852, 37.12651809273554],
      [-8.521013259887695, 37.11734748735395],
      [-8.519468307495117, 37.10612224951858],
      [-8.435440063476562, 37.08859660134791],
      [-8.383255004882812, 37.100098265217156],
      [-8.356475830078125, 37.10119357072203],
      [-8.307037353515625, 37.07818882978002],
      [-8.293991088867188, 37.073806182683725],
      [-8.265838623046875, 37.080927855576014],
      [-8.221893310546875, 37.08804885952269],
      [-8.180694580078125, 37.09133525109512],
      [-8.104476928710938, 37.068327517596586],
      [-8.0584716796875, 37.046956942312335],
      [-7.9657745361328125, 37.00913272027146],
      [-7.9163360595703125, 37.010777643303705],
      [-7.829132080078125, 37.02832127378562],
      [-7.761840820312501, 37.04914907319391],
      [-7.71240234375, 37.07490186820611],
      [-7.64923095703125, 37.10612224951858],
      [-7.581253051757812, 37.14444546942506],
      [-7.513275146484376, 37.16633573907469],
      [-7.4494171142578125, 37.17782559332976],
      [-7.410964965820313, 37.177278497031615],
      [-7.296295166015625, 37.19751842118354],
      [-7.161712646484375, 37.209003532428646],
      [-6.723632812499999, 41.88592102814744],
      [-8.72589111328125, 41.95949009892467],
      [-8.862190246582031, 41.87007214667565],
    ]

    let inside = false
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i][0]
      const yi = polygon[i][1]
      const xj = polygon[j][0]
      const yj = polygon[j][1]

      const testPosition1 = yi > y
      const testPosition2 = yj > y
      const intersect = testPosition1 !== testPosition2 && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi
      if (intersect) inside = !inside
    }

    return inside
  }
}
